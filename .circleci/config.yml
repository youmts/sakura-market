version: 2
jobs:
  build:
    parallelism: 3
    docker:
      - image: circleci/ruby:2.6.3-node # このイメージをすべての `steps` が実行されるプライマリ コンテナとして使用します
        environment: # プライマリ コンテナの環境変数
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          RAILS_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres?encoding=utf8&pool=5&timeout=5000

      - image: circleci/postgres:9.6.9-alpine
        ports: ["5432:5432"]
        environment: # データベースの環境変数
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres

    steps: # 実行可能コマンドの集合
      - checkout # ソース コードを作業ディレクトリにチェックアウトする特別なステップ

      - run:
          name: Bundler を 2 系に
          command: |
            sudo gem update --system
            sudo gem uninstall bundler
            sudo rm /usr/local/bin/bundle
            sudo rm /usr/local/bin/bundler
            sudo gem install bundler

      - run:
          name: Bundler の指定
          command: bundle -v

      # バンドル キャッシュを復元します
      # 依存関係キャッシュについては https://circleci.com/ja/docs/2.0/caching/ をお読みください

      - restore_cache:
          keys:
            - rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
            - rails-demo-bundle-v2-

      - run: # Ruby の依存関係をインストールします
          name: バンドル インストール
          command: bundle check --path vendor/bundle || bundle install --deployment

      # Ruby の依存関係のバンドル キャッシュを保存します

      - save_cache:
          key: rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - run:
          name: DB の待機
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: データベースのセットアップ
          command: bin/rails db:schema:load --trace
      - run:
          name: RSpec の並列実行
          command: |
            bundle exec rspec --profile 10 \
                              --format RspecJunitFormatter \
                              --out test_results/rspec.xml \
                              --format progress \
                              $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)

      # タイミング解析のテスト結果を保存します

      - store_test_results: # テスト サマリー (https://circleci.com/ja/docs/2.0/collect-test-data/) に表示するテスト結果をアップロードします
          path: test_results
      # デプロイの構成例については https://circleci.com/ja/docs/2.0/deployment-integrations/ を参照してください